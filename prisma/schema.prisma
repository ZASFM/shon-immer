generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  profile       Profile?
  order         Order[]
  favorite      Favorite?
}

model Profile {
  id    String  @id @default(cuid())
  phone String?
  img   String?
  name  String?
  email String  @unique
  user  User    @relation(fields: [email], references: [email])
}

enum Role {
  USER
  ADMIN
  DELIVERY
}

model Menu {
  id           String   @id @default(cuid())
  title        String
  shortDesc    String
  longDesc     String?
  price        Float
  sellingPrice Float?
  image        String
  prepType     String[]
  onPromo      Boolean  @default(false)
  category     String
}

model category {
  id    String @id @default(cuid())
  title String @unique
  desc  String
  img   String
}

enum OrderStatus {
  PREPARING
  UNASSIGNED
  COLLECTED
  DELIVERED
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  cart            Json[]
  orderDate       DateTime    @default(now())
  deliveryTime    DateTime?   @default(now())
  userName        String
  userEmail       String // To be used to filter orders that belong to the customer
  user            User        @relation(fields: [userEmail], references: [email])
  userPhone       String
  paymentToken    String? // For payment verifications
  paid            Boolean     @default(false)
  delivery        Delivery?
  deliveryAddress String
  deliveryFee     Float       @default(4)
  serviceFee      Float       @default(3)
  status          OrderStatus @default(PREPARING)
  note            String?
  discount        Float?
  total           Float
}

model Delivery {
  id           String @id @default(cuid())
  deliverName  String
  deliverPhone String
  deliverEmail String
  order        Order  @relation(fields: [orderNum], references: [orderNumber])
  orderNum     String @unique
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String   @unique
  menur     String[]
}

model Restaurant {
  id          String @id @default(cuid())
  name        String
  address     String @default("Hachmannplatz 13, 20099 Hamburg")
  openTimes   Json[]
  deliveryFee Float  @default(4)
  serviceFee  Float  @default(3)
  bannerImg   String
  rating      Float  @default(4.5)
}

model Notification {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  type      String
  message   String
  status    notifyStatus @default(UNREAD)
}

enum notifyStatus {
  READ
  UNREAD
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
